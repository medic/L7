// Generated by CoffeeScript 1.6.2
(function() {
  var message, parser, should, vows, _;

  vows = require('vows');

  should = require('should');

  _ = require('underscore');

  parser = require('..');

  vows.describe('parser parsing').addBatch({
    'basic error handling': {
      topic: function() {
        return parser;
      },
      'when parsing empty string return an error object': function(topic) {
        return topic.parse('').should.have.property('error');
      },
      'when parsing anything except a string throw an error': function(topic) {
        topic.parse(void 0).should.have.property('error');
        topic.parse(null).should.have.property('error');
        topic.parse(0).should.have.property('error');
        return topic.parse(77).should.have.property('error');
      },
      'when parsing expect an MSH header': function(topic) {
        var result;

        result = topic.parse('qq');
        return result.should.have.property('error');
      }
    },
    'msh handling': {
      topic: function() {
        return parser.parse(message);
      },
      'special MSH handling': function(message) {
        var msh;

        should.exist(message);
        msh = message.getPart('MSH');
        should.exist(msh);
        msh.name.should.eql('MSH');
        msh.should.have.property('getValue');
        msh.getValue(0).should.eql('MSH');
        return msh.getValue(1).should.eql('|');
      }
    },
    'segments': {
      topic: function() {
        return parser.parse(message).getPart('MSH');
      },
      'get value': function(msh) {
        return msh.getValue(10).should.eql('4676115');
      },
      'get field': function(msh) {
        return msh.getPart(3).should.have.lengthOf(3);
      },
      'get value of field': function(msh) {
        return msh.getPart(3).val().should.eql('REG^REG^');
      },
      'get component of field': function(msh) {
        return msh.getPart(3).getPart(0).val().should.eql('REG');
      },
      'get subcomponent of component': function(msh) {
        msh.getPart(8).getPart(0).getPart(1).val().should.eql('U');
        return msh.getPart(8).getPart(0).val().should.eql('SI&U');
      }
    },
    'query definition': {
      topic: function() {
        return parser.parse(message);
      },
      'basic query': function(msg) {
        return msg.query('PID|3').should.eql('353966');
      },
      'component query': function(msg) {
        return msg.query('PID|5^0').should.eql('SMITH');
      },
      'querying segment with a number in it': function(msg) {
        return msg.query('PV1|2').should.eql('O');
      }
    },
    'error handling for queries': {
      topic: function() {
        return parser.parse(message);
      },
      'bad selector throws an error': function(msg) {
          (function() {
              msg.query('MOONBAT|MOONBAT');
          }).should["throw"]();
          try {
              msg.query('MOONBAT*MOONBAT');
          } catch (e) {
              e.message.indexOf("Bad selector 'MOONBAT*MOONBAT'").should.eql(0);
          }
          try {
              msg.query('MOONBAT|MOONBAT');
          } catch (e) {
              e.message.indexOf("Bad selector 'MOONBAT|MOONBAT'").should.eql(0);
          }
      }
    },
    'querying for elements that are not there': {
      topic: function() {
        return parser.parse(message);
      },
      'selector with badly indexed component should return null': function(msg) {
        return should.strictEqual(msg.query('PID|5^1000'), null);
      },
      'selector going off the end of the segment should return null': function(msg) {
        return should.strictEqual(msg.query('PID|1000'), null);
      },
      'selector total miss should return null': function(msg) {
        return should.strictEqual(msg.query('QQQ|0'), null);
      },
      'selector total miss with component should return null': function(msg) {
        return should.strictEqual(msg.query('QQQ|0^5'), null);
      }
    },
    'date autoboxing': {
      topic: function() {
        return parser.parse(message);
      },
      'date selector should not throw an error': function(msg) {
        return (function() {
          return msg.query('MSH@7');
        }).should.not["throw"]();
      },
      'date selector should return a date': function(msg) {
        var result;

        result = msg.query('MSH@7');
        _.isDate(result).should.be["true"];
        result.getFullYear().should.eql(2005);
        result.getMonth().should.eql(8);
        result.getDate().should.eql(12);
        result.getHours().should.eql(11);
        result.getMinutes().should.eql(5);
        result.getSeconds().should.eql(38);
        return result.getMilliseconds().should.eql(0);
      },
      'date selector which does not select date should return null': function(msg) {
        (function() {
          return msg.query('MSH@8');
        }).should.not["throw"]();
        return should.strictEqual(null, msg.query('MSH@8'));
      },
      'date selector works for components': function(msg) {
        var result;

        result = msg.query('SCH|11@1');
        _.isDate(result).should.be["true"];
        result.getFullYear().should.eql(2005);
        result.getMonth().should.eql(8);
        result.getDate().should.eql(12);
        result.getHours().should.eql(11);
        result.getMinutes().should.eql(4);
        result.getSeconds().should.eql(30);
        return result.getMilliseconds().should.eql(0);
      },
      'date selector returns null for missing dates': function(msg) {
        return should.strictEqual(msg.query('SCH|11@1000'), null);
      },
      'date selector accepts partial dates': function(msg) {
        var result;

        result = msg.query('PID@7');
        _.isDate(result).should.be["true"];
        result.getFullYear().should.eql(1982);
        result.getMonth().should.eql(6);
        result.getDate().should.eql(7);
        result.getHours().should.eql(0);
        result.getMinutes().should.eql(0);
        result.getSeconds().should.eql(0);
        return result.getMilliseconds().should.eql(0);
      }
    }
  })["export"](module);

  message = "MSH|^~\\&|REG^REG^|XYZ||XYZ|20050912110538|SI&U|SIU^S12|4676115|P|2.3\rPID|||353966||SMITH^JOHN^^^^||19820707|F||C|108 MAIN STREET ^^ANYTOWN^TX^77777^^|HARV|(512)555-0170|||||00362103|123-45-6789||||||||||||\rSCH|1||||||NEW||||20050912110230^20050912110430||||||||||||||||||^^^^^^||3|\rPV1||O|SEROT|3|||1284^JOHNSON^MIKE^S.^^MD~|||SEROT||||1|||1284^JOHNSON^MIKE^S.^^ MD|SERIES|787672|B|||||||||N||||||||||||A|||20050912110230|||||| PV2|||HAND BRACE NEEDS REPAIRED|||||||||||20050912||||||||||A||20050725|||||O||||||\rNK1|0001|HULK^INCREDIBLE|M|123 FAKE ST^^OUTLAND^^00000|123456789||";

}).call(this);
